From 81ab17a48fbf7b48bbdb87ba050127b163171a0c Mon Sep 17 00:00:00 2001
From: Prakash Surya <prakash.surya@delphix.com>
Date: Fri, 31 May 2019 16:22:43 -0400
Subject: [PATCH 01/12] Initial drop of generic illumos support.  Ported from
 DelphixOS. Portions contributed by: Pavel Zakharov
 <pavel.zakharov@delphix.com> Portions contributed by: George Wilson
 <george.wilson@delphix.com> Portions contributed by: Dan McDonald
 <danmcd@joyent.com>

---
 azurelinuxagent/common/osutil/default.py      |  15 +-
 azurelinuxagent/common/osutil/factory.py      |   6 +
 azurelinuxagent/common/osutil/illumos.py      | 320 ++++++++++++++++++
 azurelinuxagent/common/version.py             |  15 +
 .../daemon/resourcedisk/factory.py            |   6 +
 .../daemon/resourcedisk/illumos.py            |  32 ++
 azurelinuxagent/pa/deprovision/factory.py     |   5 +
 azurelinuxagent/pa/deprovision/illumos.py     |  74 ++++
 azurelinuxagent/pa/provision/factory.py       |   7 +
 azurelinuxagent/pa/provision/illumos.py       |  32 ++
 config/illumos/waagent.conf                   |  26 ++
 init/illumos/waagent.xml                      |  45 +++
 setup.py                                      |   6 +
 13 files changed, 588 insertions(+), 1 deletion(-)
 create mode 100644 azurelinuxagent/common/osutil/illumos.py
 create mode 100644 azurelinuxagent/daemon/resourcedisk/illumos.py
 create mode 100644 azurelinuxagent/pa/deprovision/illumos.py
 create mode 100644 azurelinuxagent/pa/provision/illumos.py
 create mode 100644 config/illumos/waagent.conf
 create mode 100644 init/illumos/waagent.xml

diff --git a/azurelinuxagent/common/osutil/default.py b/azurelinuxagent/common/osutil/default.py
index 7ccc534..a56afa9 100644
--- a/azurelinuxagent/common/osutil/default.py
+++ b/azurelinuxagent/common/osutil/default.py
@@ -1,5 +1,6 @@
 #
 # Copyright 2018 Microsoft Corporation
+# Copyright (c) 2017 by Delphix. All rights reserved.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -618,6 +619,8 @@ class DefaultOSUtil(object):
                        "the pattern [{0}]: {1}\n".format(pattern, device_list)
         raise OSUtilError(msg="Failed to get dvd device from {0}".format(dev_dir),
                           inner=inner_detail)
+    def get_dvd_mount_options(self):
+        return "-o ro -t udf,iso9660"
 
     def mount_dvd(self,
                   max_retry=6,
@@ -641,10 +644,11 @@ class DefaultOSUtil(object):
             os.makedirs(mount_point)
 
         err = ''
+        mount_options = self.get_dvd_mount_options()
         for retry in range(1, max_retry):
             return_code, err = self.mount(dvd_device,
                                           mount_point,
-                                          option="-o ro -t udf,iso9660",
+                                          option=mount_options,
                                           chk_err=False)
             if return_code == 0:
                 logger.info("Successfully mounted dvd")
@@ -1101,6 +1105,15 @@ class DefaultOSUtil(object):
     def restart_ssh_service(self):
         pass
 
+    def enable_serial_console(self):
+        return False
+
+    def reboot_system(self):
+        logger.info('Rebooting system')
+        ret = shellutil.run('shutdown -r now')
+        if ret != 0:
+            logger.error('Failed to reboot the system')
+
     def route_add(self, net, mask, gateway):
         """
         Add specified route 
diff --git a/azurelinuxagent/common/osutil/factory.py b/azurelinuxagent/common/osutil/factory.py
index 56515ed..77b3b6d 100644
--- a/azurelinuxagent/common/osutil/factory.py
+++ b/azurelinuxagent/common/osutil/factory.py
@@ -1,4 +1,6 @@
 # Copyright 2018 Microsoft Corporation
+# Copyright (c) 2016 by Delphix. All rights reserved.
+# Copyright 2019 Joyent, Inc.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -35,6 +37,7 @@ from .gaia import GaiaOSUtil
 from .iosxe import IosxeOSUtil
 from .nsbsd import NSBSDOSUtil
 from .openwrt import OpenWRTOSUtil
+from .illumos import illumosOSUtil
 
 from distutils.version import LooseVersion as Version
 
@@ -127,6 +130,9 @@ def _get_osutil(distro_name, distro_code_name, distro_version, distro_full_name)
     if distro_name == "openwrt":
         return OpenWRTOSUtil()
 
+    elif distro_name == "illumos":
+        return illumosOSUtil()
+
     else:
         logger.warn("Unable to load distro implementation for {0}. Using "
                     "default distro implementation instead.",
diff --git a/azurelinuxagent/common/osutil/illumos.py b/azurelinuxagent/common/osutil/illumos.py
new file mode 100644
index 0000000..0cfd53e
--- /dev/null
+++ b/azurelinuxagent/common/osutil/illumos.py
@@ -0,0 +1,320 @@
+# Microsoft Azure Linux Agent
+#
+# Copyright 2014 Microsoft Corporation
+# Copyright (c) 2016, 2017 by Delphix. All rights reserved.
+# Copyright 2019 Joyent, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# Requires Python 2.4+ and Openssl 1.0+
+#
+
+import os
+import time
+from azurelinuxagent.common.exception import OSUtilError
+import azurelinuxagent.common.utils.fileutil as fileutil
+import azurelinuxagent.common.utils.shellutil as shellutil
+import azurelinuxagent.common.logger as logger
+from azurelinuxagent.common.osutil.default import DefaultOSUtil
+
+class illumosOSUtil(DefaultOSUtil):
+    def __init__(self):
+        super(illumosOSUtil, self).__init__()
+
+    #
+    # The methods that emit an "error" are not expected to be called
+    # when the agent is running on illumos. The code paths that could
+    # have called them have been disabled either by configuration file
+    # settings, or code changes to other parts of the codebase.
+    #
+
+    def useradd(self, username, expiration=None):
+        logger.error('"useradd" not supported.')
+
+    def chpasswd(self, username, password, crypt_id=6, salt_len=10):
+        logger.error('"chpasswd" not supported.')
+
+    def conf_sudoer(self, username, nopasswd=False, remove=False):
+        logger.error('"conf_sudoer" not supported.')
+
+    def conf_sshd(self, disable_password):
+        logger.error('"conf_sshd" not supported.')
+
+    def del_root_password(self):
+        logger.error('"del_root_password" not supported.')
+
+    def stop_mgmt_service(self):
+        logger.error('"stop_mgmt_service" not supported.')
+
+    def start_agent_service(self):
+        return shellutil.run("svcadm enable -st svc:/system/virtualization/waagent", chk_err=False)
+
+    def stop_agent_service(self):
+        return shellutil.run("svcadm disable -st svc:/system/virtualization/waagent", chk_err=False)
+
+    def register_agent_service(self):
+        return shellutil.run("svcadm enable svc:/system/virtualization/waagent", chk_err=False)
+
+    def unregister_agent_service(self):
+        return shellutil.run("svcadm disable svc:/system/virtualization/waagent", chk_err=False)
+
+    def set_admin_access_to_ip(self, dest_ip):
+        logger.warn('"set_admin_access_to_ip" not supported.')
+
+    def set_hostname(self, hostname):
+        #
+        # In order for the identity-node service to properly detect the
+        # hostname from the contents of /etc/nodename, the file needs to
+        # contain a newline after the hostname. Otherwise, the service
+        # will simply assign "unknown" as the hostname for the system.
+        #
+        fileutil.write_file('/etc/nodename', '{0}\n'.format(hostname))
+
+        ret = shellutil.run('svccfg -s svc:/system/identity:node setprop config/local_override = true')
+        if ret:
+            raise OSUtilError('Unable to set property of "svc:/system/identity:node" service.')
+
+        ret = shellutil.run('svcadm refresh svc:/system/identity:node')
+        if ret:
+            raise OSUtilError('Unable to refresh "svc:/system/identity:node" service.')
+
+        #
+        # Unfortunately, there isn't a way to cause the service refresh
+        # executed above a synchronous operation. Thus, without this
+        # loop, it would be possible for this function to return without
+        # having the hostname having been updated yet.
+        #
+        # Setting the hostname on the other platforms is a synchronous
+        # operation, so we've opted to enforce this fuction as being
+        # synchronus as well.
+        #
+        actual = None
+        for i in range(0, 10):
+            ret = shellutil.run_get_output('hostname')
+            if ret[0] == 0:
+                actual = ret[1].strip()
+            else:
+                raise OSUtilError('Unable to retrieve hostname')
+
+            if hostname == actual:
+                break
+            else:
+                time.sleep(1)
+
+        if actual != hostname:
+            raise OSUtilError('Unable to modify hostname to the desired value')
+
+    def restart_if(self, ifname):
+        return shellutil.run("ipadm refresh-addr {0}".format(ifname))
+
+    def publish_hostname(self, hostname):
+        #
+        # We intentionally leave this method unimplemented as we don't
+        # rely on the DHCP for providing the system's hostname. Instead,
+        # we rely on the "set_hostname" function to configure the
+        # "/etc/nodename" file, as well as configure the "identity:node"
+        # service to always use that file's contents to configure the
+        # hostname of the system.
+        #
+        logger.warn('"publish_hostname" not supported.')
+
+    def set_dhcp_hostname(self, hostname):
+        #
+        # We initentionally leave this function unimplemented, for the
+        # same reason that we leave "publish_hostname" unimplemented;
+        # see the comment in that function for more details.
+        #
+        logger.warn('"set_dhcp_hostname" not supported.')
+
+    def restart_ssh_service(self):
+        ret = shellutil.run('svcadm disable -s svc:/network/ssh')
+        if ret == 0:
+            return shellutil.run('svcadm enable -s svc:/network/ssh')
+        else:
+            return ret
+
+    def enable_serial_console(self):
+        #
+        # For now, assume your illumos distro's VHD or image ALREADY HAS
+        # serial console enabled.
+        #
+        return True
+
+    def reboot_system(self):
+        logger.info('Rebooting system')
+        ret = shellutil.run('reboot')
+        if ret != 0:
+            logger.error('Failed to reboot the system')
+
+    def get_dhcp_lease_endpoint(self):
+        ret = shellutil.run_get_output('/sbin/dhcpinfo 245')
+
+        #
+        # The dhcpinfo command can fail if the Azure specific DHCP
+        # option of 245 isn't contained in the /etc/dhcp/inittab file.
+        # Additionally, if the command succeeds, it's possible that the
+        # option wasn't found, in which case dhcpinfo will produce no
+        # output.
+        #
+        if ret[0] == 0 and ret[1] != '':
+            return ret[1].strip()
+        else:
+            return None
+
+    def is_sys_user(self, username):
+        logger.warn('"is_sys_user" not supported.')
+
+    def del_account(self, username):
+        logger.warn('"del_account" not supported.')
+
+    def deploy_ssh_pubkey(self, username, pubkey):
+        logger.warn('"deploy_ssh_pubkey" not supported.')
+
+    def is_selinux_system(self):
+        return False
+
+    def get_dvd_mount_options(self):
+        return "-o ro -F udfs"
+
+    def get_dvd_device(self, dev_dir='/dev'):
+        cmd = "rmformat -l | grep 'Logical Node' | awk '{print $NF}' | sed -e 's/rdsk/dsk/'"
+        ret = shellutil.run_get_output(cmd)
+        if ret[0] == 0:
+            device = ret[1].strip()
+            logger.info('Using dvd device: "{0}"'.format(device))
+            return device
+        else:
+            raise OSUtilError('Failed to determine DVD device.')
+
+    def eject_dvd(self, chk_err=True):
+        logger.warn('"eject_dvd" not supported.')
+
+    def get_if_mac(self, ifname):
+        data = self._get_net_info()
+        if data[0] == ifname:
+            return data[2].replace(':', '').upper()
+        return None
+
+    def get_first_if(self):
+        return self._get_net_info()[:2]
+
+    def route_add(self, net, mask, gateway):
+        #
+        # The "Router" DHCP option is provided by the Azure cloud's DHCP
+        # server, so instead of having the Agent modify the routes, we
+        # rely on the DHCP client on the DE to do this.
+        #
+        logger.warn('"route_add" not supported.')
+
+    def is_missing_default_route(self):
+        return False
+
+    #
+    # When probing for the wireserver endpoint using DHCP, the DHCP
+    # services doesn't need to be disabled when running on illumos.
+    # Additionally, this won't normally be called, since the DHCP cache
+    # will normally be used to determine the wireserver endpoint; and
+    # thus, we won't need to probe for the endpoint using DHCP requests.
+    #
+    def is_dhcp_enabled(self):
+        return False
+
+    def allow_dhcp_broadcast(self):
+        pass
+
+    def get_dhcp_pid(self):
+        ret = shellutil.run_get_output("pgrep -c $(svcs -H -o ctid svc:/network/dhcp-client)", chk_err=False)
+        return ret[1] if ret[0] == 0 else None
+
+    def set_scsi_disks_timeout(self, timeout):
+        pattern = r'^set sd:sd_io_time = (.*)$'
+        if not os.path.isfile('/etc/system'):
+            raise OSUtilError('file "/etc/system" not found, unable to set SCSI disks timeout.')
+
+        #
+        # Since changes to this setting require a reboot to take effect,
+        # we're careful to only change the value and print the warning
+        # message if the current value is different than the desired
+        # value. Essentially, we only want to print the warning message
+        # that suggest a reboot is required, if we actually modify the
+        # value that's already set; otherwise, we could unnecessarily
+        # suggest rebooting the system when that's not actually necessary.
+        #
+
+        match = fileutil.findstr_in_file('/etc/system', pattern)
+        if match:
+            logger.info('Found existing SCSI disk timeout setting: "{0}".'.format(match.group(0)))
+
+            try:
+                current = int(match.group(1))
+            except ValueError:
+                raise OSUtilError('Unable to parse existing SCSI disk timeout: "{0}".'.format(match.group(1)))
+
+            if current == int(timeout):
+                logger.info('Current SCSI disk timeout matches desired SCSI disk timeout, skipping.')
+                return
+
+        logger.warn('Updating SCSI disk timeout to desired value of "{0}", reboot required to take effect.'.format(timeout))
+        fileutil.update_conf_file('/etc/system',
+                                  'set sd:sd_io_time',
+                                  'set sd:sd_io_time = {0}\n'.format(timeout))
+
+    def check_pid_alive(self, pid):
+        return shellutil.run("ps -p {0}".format(pid), chk_err=False) == 0
+
+    @staticmethod
+    def _get_net_info():
+        iface = ''
+        inet = ''
+        mac = ''
+
+        err, output = shellutil.run_get_output('dladm show-ether -p -o LINK', chk_err=False)
+        if err:
+            raise OSUtilError("Can't find ether interface:{0}".format(output))
+        ifaces = output.split()
+        if not ifaces:
+            raise OSUtilError("Can't find ether interface.")
+        iface = ifaces[0]
+
+        err, output = shellutil.run_get_output('dladm show-phys -m -p -o address ' + iface, chk_err=False)
+        if err:
+            raise OSUtilError("Can't get mac address for interface:{0}".format(iface))
+        macs = output.split()
+        if not macs:
+            raise OSUtilError("Can't find mac address.")
+        mac = macs[0]
+
+        #
+        # It's possible for the output from "dladm show-phys" to output
+        # a mac address, such that each octet is not two characters
+        # (e.g. "2:dc:0:0:23:ff"). Certain parts of the agent expect
+        # each octet of the mac address to be two hex characters long,
+        # so we're forcing the address returned by this function to
+        # always have two character long octets.
+        #
+        mac = ":".join(map(lambda x: "{0:02x}".format(int(x, 16)), mac.split(":")))
+
+        err, output = shellutil.run_get_output('ipadm show-addr -p -o addr ' + iface + '/', chk_err=False)
+        if err:
+            raise OSUtilError("Can't get ip address for interface:{0}".format(iface))
+        ips = output.split()
+        if not ips:
+            raise OSUtilError("Can't find ip address.")
+        ip = ips[0].split('/')[0]
+
+        logger.verbose("Interface info: ({0},{1},{2})", iface, ip, mac)
+
+        return iface, ip, mac
+
+    def device_for_ide_port(self, port_id):
+        logger.warn('"device_for_ide_port" not supported.')
diff --git a/azurelinuxagent/common/version.py b/azurelinuxagent/common/version.py
index 7142942..90f21f2 100644
--- a/azurelinuxagent/common/version.py
+++ b/azurelinuxagent/common/version.py
@@ -1,4 +1,6 @@
 # Copyright 2019 Microsoft Corporation
+# Copyright (c) 2016, 2017 by Delphix. All rights reserved.
+# Copyright 2019 Joyent, Inc.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -22,6 +24,7 @@ import sys
 
 import azurelinuxagent.common.conf as conf
 import azurelinuxagent.common.utils.fileutil as fileutil
+import azurelinuxagent.common.utils.shellutil as shellutil
 from azurelinuxagent.common.utils.flexible_version import FlexibleVersion
 from azurelinuxagent.common.future import ustr, get_linux_distribution
 
@@ -85,6 +88,18 @@ def get_distro():
     elif 'NS-BSD' in platform.system():
         release = re.sub('\-.*\Z', '', ustr(platform.release()))
         osinfo = ['nsbsd', release, '', 'nsbsd']
+    elif 'SunOS' in platform.system():
+        release = platform.release()
+        # SunOS can be illumos or Oracle Solaris.  Use `uname -o` to confirm
+        # illumos.
+        if 'illumos' in shellutil.run_get_output("uname -o")[1]:
+            # /etc/release has the illumos distro in its first word
+            # (e.g. "OmniOS", "OpenIndiana", "SmartOS")
+            # If we need to get more specific, do that here.
+            # But for now, just trust platform.release()
+            osinfo = ['illumos', release, '', 'illumos']
+        else:
+            osinfo = ['solaris', release, '', 'solaris']
     else:
         try:
             # dist() removed in Python 3.7
diff --git a/azurelinuxagent/daemon/resourcedisk/factory.py b/azurelinuxagent/daemon/resourcedisk/factory.py
index 3c4f5d5..3b17e2e 100644
--- a/azurelinuxagent/daemon/resourcedisk/factory.py
+++ b/azurelinuxagent/daemon/resourcedisk/factory.py
@@ -1,4 +1,6 @@
 # Copyright 2018 Microsoft Corporation
+# Copyright (c) 2016, 2017 by Delphix. All rights reserved.
+# Copyright 2019 Joyent, Inc.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -22,6 +24,7 @@ from .default import ResourceDiskHandler
 from .freebsd import FreeBSDResourceDiskHandler
 from .openbsd import OpenBSDResourceDiskHandler
 from .openwrt import OpenWRTResourceDiskHandler
+from .illumos import illumosResourceDiskHandler
 
 from distutils.version import LooseVersion as Version
 
@@ -38,5 +41,8 @@ def get_resourcedisk_handler(distro_name=DISTRO_NAME,
     if distro_name == "openwrt":
         return OpenWRTResourceDiskHandler()
 
+    if distro_name == "illumos":
+        return illumosResourceDiskHandler()
+
     return ResourceDiskHandler()
 
diff --git a/azurelinuxagent/daemon/resourcedisk/illumos.py b/azurelinuxagent/daemon/resourcedisk/illumos.py
new file mode 100644
index 0000000..0f1b390
--- /dev/null
+++ b/azurelinuxagent/daemon/resourcedisk/illumos.py
@@ -0,0 +1,32 @@
+# Microsoft Azure Linux Agent
+#
+# Copyright 2014 Microsoft Corporation
+# Copyright (c) 2016, 2017 by Delphix. All rights reserved.
+# Copyright 2019 Joyent, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# Requires Python 2.4+ and Openssl 1.0+
+#
+import azurelinuxagent.common.logger as logger
+from azurelinuxagent.daemon.resourcedisk.default import ResourceDiskHandler
+
+class illumosResourceDiskHandler(ResourceDiskHandler):
+    """
+    This class handles resource disk activation for illumos.
+    """
+    def __init__(self):
+        super(illumosResourceDiskHandler, self).__init__()
+
+    def activate_resource_disk(self):
+        logger.error("Activation of resource disk not supported.")
diff --git a/azurelinuxagent/pa/deprovision/factory.py b/azurelinuxagent/pa/deprovision/factory.py
index 278e5e2..8eca5f9 100644
--- a/azurelinuxagent/pa/deprovision/factory.py
+++ b/azurelinuxagent/pa/deprovision/factory.py
@@ -1,4 +1,6 @@
 # Copyright 2018 Microsoft Corporation
+# Copyright (c) 2016, 2017 by Delphix. All rights reserved.
+# Copyright 2019 Joyent, Inc.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -23,6 +25,7 @@ from .arch import ArchDeprovisionHandler
 from .clearlinux import ClearLinuxDeprovisionHandler
 from .coreos import CoreOSDeprovisionHandler
 from .ubuntu import UbuntuDeprovisionHandler, Ubuntu1804DeprovisionHandler
+from .illumos import illumosDeprovisionHandler
 
 
 from distutils.version import LooseVersion as Version
@@ -42,6 +45,8 @@ def get_deprovision_handler(distro_name=DISTRO_NAME,
         return CoreOSDeprovisionHandler()
     if "Clear Linux" in distro_full_name:
         return ClearLinuxDeprovisionHandler()
+    if distro_name == "illumos":
+        return illumosDeprovisionHandler()
 
     return DeprovisionHandler()
 
diff --git a/azurelinuxagent/pa/deprovision/illumos.py b/azurelinuxagent/pa/deprovision/illumos.py
new file mode 100644
index 0000000..0f88a30
--- /dev/null
+++ b/azurelinuxagent/pa/deprovision/illumos.py
@@ -0,0 +1,74 @@
+# Microsoft Azure Linux Agent
+#
+# Copyright 2014 Microsoft Corporation
+# Copyright (c) 2017 by Delphix. All rights reserved.
+# Copyright 2019 Joyent, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# Requires Python 2.4+ and Openssl 1.0+
+#
+
+import azurelinuxagent.common.utils.fileutil as fileutil
+from azurelinuxagent.pa.deprovision.default import DeprovisionHandler, \
+                                                   DeprovisionAction
+
+class illumosDeprovisionHandler(DeprovisionHandler):
+    def __init__(self):
+        super(illumosDeprovisionHandler, self).__init__()
+
+    def setup(self, deluser):
+        warnings, actions = super(illumosDeprovisionHandler, self).setup(deluser)
+
+        #
+        # Disable mgmt to prevent it from calling devfsadm periodically,
+        # which recreates /ect/path_to_inst and leaves the vm in a bad
+        # state on startup.
+        #
+        warnings.append("WARNING! The illumos Management service will be stopped.")
+        actions.append(DeprovisionAction(self.osutil.stop_mgmt_service))
+
+        files_to_del = [
+            #
+            # Remove DHCP files, which will be recreated by dhcpagent
+            # (or one of it's supporting libraries) when it acquires a
+            # new lease.
+            #
+            '/etc/dhcp/*.dhc',
+            #
+            # Removing this files will cause the kernel to fall back to
+            # a "reconfigure" mode on the next boot.
+            #
+            '/etc/path_to_inst',
+            #
+            # Remove dlpx-app-gate files, which will be recreated by
+            # "dxsvcinit configure" on reboot.
+            #
+            '/etc/engine.install',
+            '/etc/challenge_response.key',
+            '/etc/engine-code',
+            #
+            # Remove history of previously run Bash commands.
+            #
+            '/root/.bash_history'
+            #
+            # XXX KEBE ASKS --> more?!?  SSH keys?
+            #
+        ]
+
+        for f in files_to_del:
+            warnings.append("WARNING! {0} will be removed.".format(f))
+        actions.append(DeprovisionAction(fileutil.rm_files, files_to_del))
+
+        return warnings, actions
+
diff --git a/azurelinuxagent/pa/provision/factory.py b/azurelinuxagent/pa/provision/factory.py
index 8134d19..3769638 100644
--- a/azurelinuxagent/pa/provision/factory.py
+++ b/azurelinuxagent/pa/provision/factory.py
@@ -1,4 +1,6 @@
 # Copyright 2018 Microsoft Corporation
+# Copyright (c) 2016, 2017 by Delphix. All rights reserved.
+# Copyright 2019 Joyent, Inc.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -22,17 +24,22 @@ from azurelinuxagent.common.version import DISTRO_NAME, DISTRO_VERSION, \
 
 from .default import ProvisionHandler
 from .cloudinit import CloudInitProvisionHandler, cloud_init_is_enabled
+from .illumos import illumosProvisionHandler
 
 def get_provision_handler(distro_name=DISTRO_NAME,
                             distro_version=DISTRO_VERSION,
                             distro_full_name=DISTRO_FULL_NAME):
 
+    if distro_name == "illumos":
+        return illumosProvisionHandler();
+
     provisioning_agent = conf.get_provisioning_agent()
 
     if provisioning_agent == 'cloud-init' or (
             provisioning_agent == 'auto' and
             cloud_init_is_enabled()):
         logger.info('Using cloud-init for provisioning')
+
         return CloudInitProvisionHandler()
 
     logger.info('Using waagent for provisioning')
diff --git a/azurelinuxagent/pa/provision/illumos.py b/azurelinuxagent/pa/provision/illumos.py
new file mode 100644
index 0000000..90d9a09
--- /dev/null
+++ b/azurelinuxagent/pa/provision/illumos.py
@@ -0,0 +1,32 @@
+#
+# Copyright (c) 2016, 2017 by Delphix. All rights reserved.
+# Copyright 2019 Joyent, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# Requires Python 2.4+ and Openssl 1.0+
+#
+
+import os
+import azurelinuxagent.common.logger as logger
+import azurelinuxagent.common.conf as conf
+from azurelinuxagent.pa.provision.default import ProvisionHandler
+from azurelinuxagent.common.exception import ProvisionError, ProtocolError
+import azurelinuxagent.common.utils.fileutil as fileutil
+
+class illumosProvisionHandler(ProvisionHandler):
+    def __init__(self):
+        super(illumosProvisionHandler, self).__init__()
+
+    def config_user_account(self, ovfenv):
+        logger.info('"config_user_account" not supported.')
diff --git a/config/illumos/waagent.conf b/config/illumos/waagent.conf
new file mode 100644
index 0000000..54f379f
--- /dev/null
+++ b/config/illumos/waagent.conf
@@ -0,0 +1,26 @@
+#
+# Microsoft Azure Linux Agent Configuration
+#
+# Copyright (c) 2016, 2017 by Delphix. All rights reserved.
+# Copyright 2019 Joyent, Inc.
+#
+
+Provisioning.Enabled=y
+Provisioning.DeleteRootPassword=n
+Provisioning.RegenerateSshHostKeyPair=y
+Provisioning.SshHostKeyPairType=rsa
+Provisioning.MonitorHostName=n
+Provisioning.DecodeCustomData=n
+Provisioning.ExecuteCustomData=n
+Provisioning.AllowResetSysUser=n
+ResourceDisk.Format=n
+ResourceDisk.EnableSwap=n
+Logs.Verbose=y
+OS.RootDeviceScsiTimeout=300
+OS.EnableRDMA=n
+DetectScvmmEnv=n
+AutoUpdate.Enabled=n
+
+# Enable Console logging, default is y, but for illumos, we want n.
+Logs.Console=n
+
diff --git a/init/illumos/waagent.xml b/init/illumos/waagent.xml
new file mode 100644
index 0000000..78095c9
--- /dev/null
+++ b/init/illumos/waagent.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0"?>
+<!DOCTYPE service_bundle SYSTEM "/usr/share/lib/xml/dtd/service_bundle.dtd.1">
+<!--
+  Copyright (c) 2016, 2017 by Delphix. All rights reserved.
+-->
+
+<service_bundle type='manifest' name='Azure Linux Agent'>
+
+<service
+	name='system/virtualization/waagent'
+	type='service'
+	version='1'>
+
+	<create_default_instance enabled='false' />
+	<single_instance />
+
+	<dependency name='network'
+		grouping='require_any'
+		restart_on='error'
+		type='service'>
+		<service_fmri value='svc:/milestone/network' />
+	</dependency>
+
+	<exec_method
+		type='method'
+		name='start'
+		exec='/opt/azure/sbin/waagent start'
+		timeout_seconds='60' />
+
+	<exec_method
+		type='method'
+		name='stop'
+		exec=':kill'
+		timeout_seconds='60' />
+
+	<template>
+		<common_name>
+			<loctext xml:lang='C'>
+				Azure Linux Agent
+			</loctext>
+		</common_name>
+	</template>
+</service>
+
+</service_bundle>
diff --git a/setup.py b/setup.py
index ee0d839..8218756 100755
--- a/setup.py
+++ b/setup.py
@@ -3,6 +3,7 @@
 # Microsoft Azure Linux Agent setup.py
 #
 # Copyright 2013 Microsoft Corporation
+# Copyright 2019 Joyent, Inc.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -155,6 +156,11 @@ def get_data_files(name, version, fullname):
         set_bin_files(data_files, dest="/usr/local/sbin")
         set_conf_files(data_files, src=["config/openbsd/waagent.conf"])
         set_openbsd_rc_files(data_files)
+    elif name == 'illumos':
+        set_bin_files(data_files, dest="/opt/azure/sbin")
+        set_conf_files(data_files, src=["config/illumos/waagent.conf"])
+        set_files(data_files, dest="/lib/svc/manifest/system",
+                src=["init/illumos/waagent.xml"])
     elif name == 'debian':
         set_bin_files(data_files)
         set_conf_files(data_files, src=["config/debian/waagent.conf"])
-- 
2.23.0

